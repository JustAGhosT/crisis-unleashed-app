---
description: Documents data flow between game components including state updates and event handling for the card game interface
---

# === USER INSTRUCTIONS ===
- frontend-next/src/features/battlefield/Battlefield.tsx
- frontend-next/src/features/battlefield/TurnManager.tsx
- frontend-next/src/features/cards/CardHand.tsx
- frontend-next/src/components/game/GameInterface.tsx
- frontend-next/src/features/players/PlayerHUD.tsx

- Notifies unit action completion and movement results
- Sends combat resolution outcomes and zone control changes
**TurnManager → Battlefield**
- Forwards played card data and targeting information
- Receives acknowledgement of play requests and effect application results
- Updates hand state after plays resolve
- Importance Score: 80
**TurnManager → CardHand**
- Publishes current phase and priority
- Publishes resource/momentum availability for play highlighting
2. TurnManager (with PlayerHUD display) verifies and deducts resources
4. Apply card effects to game state (Battlefield or other zones as applicable)
$END$
# === END USER INSTRUCTIONS ===

# component-dataflow

### Core Game Components Data Flow
- **Battlefield -> TurnManager**: Sends unit placement events, movement validation requests, attack resolution data
- **TurnManager -> PlayerHUD**: Updates energy/momentum resources, phase transitions, turn status
- **CardHand -> Battlefield**: Validates card placement requests, initiates unit deployment animations
- **GameInterface -> Global State**: Synchronizes match state, player actions, timer events

### State Update Patterns
- **PlayerHUD Resource Updates**
  - Energy costs deducted immediately on card play
  - Momentum gained after successful attacks/actions
  - Health changes trigger status effect animations
  - Resource updates synchronized across both players

- **Battlefield State Management**
  - Hex grid positions tracked for unit movement
  - Zone control status updated per turn
  - Combat resolution triggers chain reactions
  - Status effects applied to affected grid spaces

- **Card Hand Interactions**
  - Draw/discard events update hand size
  - Card preview data sent to GameInterface
  - Placement validation checked against battlefield state
  - Hover effects trigger opponent awareness flags

### Critical Game Events
1. **Turn Phase Transitions**
   - TurnManager broadcasts phase changes
   - Components update valid action sets
   - Resource pools refreshed/depleted
   - Timer events synchronized

2. **Combat Resolution**
   - Battlefield initiates attack sequences
   - PlayerHUD updates health/status
   - CardHand reveals reaction opportunities
   - Animation queues managed by GameInterface

3. **Resource Management**
   - Energy costs validated before actions
   - Momentum gained triggers ability unlocks
   - Resource pools synchronized between components
   - Overflow/deficit handling coordinated

### Component Communication Patterns
- Direct updates for critical game state
- Event-based triggers for animations/effects
- Queued updates for complex sequences
- Broadcast channels for global state changes

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga component-dataflow" along with specifying exactly what information was used from this file in a human-friendly way, instead of using kebab-case use normal sentence case.