---
description: Rules and specifications for core game entities including cards, battlefield grid, player stats, and game state models
---


# game-data-models

### Core Game Models

**Card System (90)**
- Card types hierarchy with Heroes, Units, Structures, Actions
- Unique attributes per type: Initiative, Range, Zone Restrictions
- Card state tracking including zone location, buffs/debuffs, energy cost
- Implementation in `frontend/src/types/card.ts`

**Battlefield Grid (85)**
- 5x6 hexagonal grid with distinct zones
- Axial coordinate system for hex positioning (q,r coordinates)
- Neighbor calculation and pathfinding algorithms
- Line of sight and range calculations based on hex distance
- Zone control and influence mechanics
- Implementation split between:
  - `frontend-next/src/types/grid.ts` - Core grid model and utilities
  - `frontend-next/src/features/battlefield/Battlefield.tsx` - UI representation

**Player Stats (80)**
- Dual resource system: Energy and Momentum
- Health tracking with faction-specific modifiers
- Resource generation/consumption rules
- Implementation in `frontend/src/features/players/PlayerHUD.tsx`

**Game State Model (85)**
- Turn structure with distinct phases:
  - Draw Phase: Card drawing and start-of-turn effects
  - Energy Phase: Resource generation and allocation
  - Main Phase: Card playing and unit activation
  - Combat Phase: Attack declaration and resolution
  - End Phase: End-of-turn effects and cleanup
- State machine implementation with:
  - Defined states for each game phase
  - Valid transitions between states with guard conditions
  - Side effects triggered by transitions
  - Faction-specific modifiers to transition rules
- Crisis event system that can modify state machine rules
- Implementation split between:
  - `frontend-next/src/types/state/GameStateMachine.ts` - Core state machine model
  - `frontend-next/src/features/battlefield/TurnManager.tsx` - UI orchestrator

**Combat System (90)**
- Initiative-based sequencing
- Range-based targeting rules
- Zone control effects on combat
- Faction-specific combat modifiers
- Implementation in `frontend/src/features/battlefield/CombatResolver.tsx`

### Faction-Specific Models

**Faction Mechanics (85)**
- Solaris: Energy manipulation mechanics
- Umbral: Stealth and visibility systems
- Neuralis: Mind control abilities
- Aeonic: Time manipulation effects
- Primordial: Adaptation mechanics
- Synthetic: Resource optimization
- Implementation in `frontend/src/data/factions/index.ts`

**Synergy System (80)**
- Synergy detection using directed graph of card interactions
- Tag-based matching system for identifying potential synergies
- Multi-level synergy classification (basic, advanced, expert)
- Chain reaction mechanics with:
  - Cycle detection to prevent infinite loops
  - Maximum chain depth limits for performance
  - Fallback resolution for conflicting synergy effects
- Faction-specific synergy modifiers and amplifiers
- Implementation split between:
  - `frontend-next/src/services/synergy/SynergyDetector.ts` - Core detection algorithm
  - `frontend-next/src/services/synergy/ChainResolver.ts` - Chain reaction processing
  - `frontend-next/src/services/synergy/SynergyRules.ts` - Synergy definitions and rules

$END$