
# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.

The project implements a strategic card game system with the following core business components:

## Game Interface Architecture

The main game interface orchestrates interactions between three critical subsystems:

1. **Battlefield System** (`frontend/src/components/Battlefield.ts`)

- 3D grid-based deployment system for unit placement
- Visual representation of unit stats and health
- Interactive deployment zones for card placement

1. **Card Management** (`frontend/src/components/CardHand.js`, `frontend/src/components/OpponentHand.ts`)

- Player hand management with energy-based availability
- Hidden information system for opponent cards
- Threat level indication system
- Card rarity and attribute visualization

1. **Player State Management** (`frontend/src/components/PlayerHUD.js`, `frontend/src/components/TurnManager.ts`)

- Resource tracking (health, momentum, energy)
- Turn phase progression system
- Administrative control interface

## Backend Services

Core game service (`backend/server.py`) provides:

- Status check operations for game state verification
- MongoDB integration for game state persistence
- Cross-origin request handling for client communication

## Data Models

Game state structures (`frontend/src/types/game.types.ts`) define:
- Card attributes and interactions
- Player state representation
- Game phase management

$END$
