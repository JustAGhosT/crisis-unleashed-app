
# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


Crisis Unleashed implements a complex faction-based digital card game with blockchain integration. The business logic is organized into several core domains:

## Faction System
Core faction mechanics define seven unique technological approaches:
- Solaris: Divine Algorithm and reality editing 
- Umbral: Shadow manipulation and information warfare
- Neuralis: Collective consciousness networking
- Aeonic: Time manipulation
- Infernal: Blood sacrifice mechanics
- Primordial: Evolutionary acceleration
- Synthetic: System optimization

Key files:
- `frontend/src/data/factions/*`
- `backend/types/faction.py`

## Blockchain Integration
Transaction outbox pattern ensures consistency between game state and blockchain:
- NFT minting and ownership tracking
- Multi-chain support (Ethereum, Etherlink)
- Transaction retry logic and status tracking

Key files:
- `backend/services/blockchain_handler.py`
- `backend/repository/transaction_outbox.py`

## Game Mechanics 
Core gameplay systems:
- Grid-based combat with distinct zones
- Energy and momentum resource management
- Multi-phase turn structure
- Card types: Character, Action, Upgrade, Tactic
- Crisis event system affecting all factions

Key files:
- `frontend/src/features/battlefield/Battlefield.tsx`
- `frontend/src/types/game.types.ts`

## Asset Generation
Procedural generation of faction-specific assets:
- Faction emblems with unique patterns
- Background images with faction themes
- Icons based on faction attributes
- Treatment and effect images

Key files:
- `frontend/scripts/generate-placeholder-assets*.js`

## Service Management
Health monitoring and initialization:
- Service dependency tracking
- Fail-fast initialization for critical services
- Continuous health status monitoring
- Blockchain service validation

Key files:
- `backend/services/health_manager.py`
- `backend/middleware/service_dependency.py`
