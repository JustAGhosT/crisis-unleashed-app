
## Faction System

- Solaris Nexus: Energy manipulation and prediction
- Umbral Eclipse: Stealth and information warfare
- Aeonic Dominion: Time manipulation
- Primordial Genesis: Growth and adaptation
- Infernal Core: Risk/reward sacrifice mechanics
- Neuralis Conclave: Mind control abilities
- Synthetic Directive: Mechanical optimization

## Card Game Engine

## Blockchain Integration

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.

The Crisis Unleashed project implements a complex digital card game with blockchain integration, organized around several core business domains:

## Core Game Systems (Importance: 95)

- Turn-based gameplay with phase management
- Resource systems (Energy/Momentum)
- Crisis event system affecting gameplay state
- Combat resolution with positioning mechanics

Located in:
- `frontend/src/features/battlefield/`

## Faction System (Importance: 90)

Seven unique factions with distinct mechanics:

- Solaris Nexus: Energy manipulation and prediction
- Umbral Eclipse: Stealth and information warfare
- Aeonic Dominion: Time manipulation
- Primordial Genesis: Growth and adaptation
- Infernal Core: Risk/reward sacrifice mechanics
- Neuralis Conclave: Mind control abilities
- Synthetic Directive: Mechanical optimization

Located in:

- legacyData: `frontend/src/data/factions/`
- UI (Next): `frontend-next/src/app/factions/`
- UI (Next components): `frontend-next/src/components/factions/`

## Blockchain Integration (Importance: 85)

- Transaction outbox pattern for NFT minting/trading
- Multi-chain support (Ethereum/Etherlink)
- Wallet integration and ownership verification

Located in:

- `backend/services/blockchain_service.py`

## Card Systems (Importance: 85)

- Faction-specific card mechanics
- Synergy visualization between cards
- Card ownership as NFTs
- Deck building with faction restrictions

Located in:

- Legacy UI logic, to be migrated: `frontend/src/features/cards/`
- Next UI (components): `frontend-next/src/components/cards/`
- Next routes: `frontend-next/src/app/cards/`

## Feature Management (Importance: 80)

- Progressive feature rollout system
- Role-based feature access
- Feature state persistence

Located in:

- `frontend-next/src/lib/feature-flags/`

## Service Health Management (Importance: 75)

- Critical service monitoring
- Dependency-aware initialization
- Real-time health status tracking

Located in:

- `backend/services/health_manager.py`

The system integrates these components through a service-oriented architecture, with the blockchain service handling NFT operations, the game service managing gameplay state, and the frontend providing faction-specific interfaces and mechanics.
