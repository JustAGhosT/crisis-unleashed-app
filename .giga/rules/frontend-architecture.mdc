---
description: Specifies frontend architecture patterns for a faction-based card game with complex state management and UI interactions
---


# frontend-architecture

Frontend Component Hierarchy (Importance: 85/100)

1. Game State Management Layer
Path: `frontend-next/src/lib/game-state/`
- Manages dual resource system (Energy/Momentum)
- Tracks faction-specific power states
- Handles turn phase transitions
- Crisis event state management

2. Faction System Components
Path: `frontend-next/src/components/factions/`
- Implements 7 unique faction UIs with distinct visual languages
- Faction-specific card display rules
- Cross-faction synergy visualization
- Dynamic power state indicators

3. Deck Building Interface
Path: `frontend-next/src/components/deck-builder/`
- Real-time deck validation against faction rules
- Energy curve visualization
- Synergy highlighting system
- Faction mixing restrictions UI

4. Battle Interface Components
Path: `frontend-next/src/features/battlefield/`
- Zone-based unit placement system
- Crisis event visualization
- Resource state management
- Multi-phase turn indicator

5. Card Display System
Path: `frontend-next/src/components/cards/`
- Dynamic card state visualization
- Faction-specific styling rules
- Power/synergy indicators
- Resource cost display

State Management Patterns:

1. Resource Management
- Dual tracking of Energy (0-10) and Momentum (0-5)
- Faction-specific resource generation rules
- Crisis event impact on resource states

2. Turn Phase Management
- Draw → Energy → Main → Combat → End
- Phase-specific action validation
- Crisis event integration points

3. Battlefield State
- Zone control tracking
- Unit positioning rules
- Line of sight calculations
- Crisis event modifications

4. Synergy System
- Real-time synergy detection
- Cross-faction interaction validation
- Power state calculations
- Data-Link visualization

UI/UX Implementation:

1. Faction Theming
- Unique color gradients per faction
- Faction-specific UI element styling
- Dynamic theme switching
- Power state visual feedback

2. Game Interface Layout
- Responsive battlefield zones
- Resource state indicators
- Turn phase visualization
- Crisis event alerts

3. Card Interaction System
- Drag-and-drop placement validation
- Resource cost verification
- Synergy highlight system
- Faction restriction feedback

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga frontend-architecture" along with specifying exactly what information was used from this file in a human-friendly way, instead of using kebab-case use normal sentence case.